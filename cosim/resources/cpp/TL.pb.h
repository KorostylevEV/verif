// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TL.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TL_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TL_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TL_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TL_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TL_2eproto;
namespace verif {
class TLA;
class TLADefaultTypeInternal;
extern TLADefaultTypeInternal _TLA_default_instance_;
class TLD;
class TLDDefaultTypeInternal;
extern TLDDefaultTypeInternal _TLD_default_instance_;
}  // namespace verif
PROTOBUF_NAMESPACE_OPEN
template<> ::verif::TLA* Arena::CreateMaybeMessage<::verif::TLA>(Arena*);
template<> ::verif::TLD* Arena::CreateMaybeMessage<::verif::TLD>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace verif {

// ===================================================================

class TLA PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:verif.TLA) */ {
 public:
  inline TLA() : TLA(nullptr) {}
  virtual ~TLA();

  TLA(const TLA& from);
  TLA(TLA&& from) noexcept
    : TLA() {
    *this = ::std::move(from);
  }

  inline TLA& operator=(const TLA& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLA& operator=(TLA&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TLA& default_instance();

  static inline const TLA* internal_default_instance() {
    return reinterpret_cast<const TLA*>(
               &_TLA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TLA& a, TLA& b) {
    a.Swap(&b);
  }
  inline void Swap(TLA* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TLA* New() const final {
    return CreateMaybeMessage<TLA>(nullptr);
  }

  TLA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TLA>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TLA& from);
  void MergeFrom(const TLA& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLA* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "verif.TLA";
  }
  protected:
  explicit TLA(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TL_2eproto);
    return ::descriptor_table_TL_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 7,
    kOpcodeFieldNumber = 1,
    kParamFieldNumber = 2,
    kSizeFieldNumber = 3,
    kSourceFieldNumber = 4,
    kAddressFieldNumber = 5,
    kMaskFieldNumber = 6,
    kCorruptFieldNumber = 8,
  };
  // bytes data = 7;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 opcode = 1;
  void clear_opcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 opcode() const;
  void set_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_opcode() const;
  void _internal_set_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 param = 2;
  void clear_param();
  ::PROTOBUF_NAMESPACE_ID::uint32 param() const;
  void set_param(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_param() const;
  void _internal_set_param(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 source = 4;
  void clear_source();
  ::PROTOBUF_NAMESPACE_ID::uint32 source() const;
  void set_source(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_source() const;
  void _internal_set_source(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 address = 5;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 mask = 6;
  void clear_mask();
  ::PROTOBUF_NAMESPACE_ID::uint32 mask() const;
  void set_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mask() const;
  void _internal_set_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool corrupt = 8;
  void clear_corrupt();
  bool corrupt() const;
  void set_corrupt(bool value);
  private:
  bool _internal_corrupt() const;
  void _internal_set_corrupt(bool value);
  public:

  // @@protoc_insertion_point(class_scope:verif.TLA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 opcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 param_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 source_;
  ::PROTOBUF_NAMESPACE_ID::uint32 address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mask_;
  bool corrupt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TL_2eproto;
};
// -------------------------------------------------------------------

class TLD PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:verif.TLD) */ {
 public:
  inline TLD() : TLD(nullptr) {}
  virtual ~TLD();

  TLD(const TLD& from);
  TLD(TLD&& from) noexcept
    : TLD() {
    *this = ::std::move(from);
  }

  inline TLD& operator=(const TLD& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLD& operator=(TLD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TLD& default_instance();

  static inline const TLD* internal_default_instance() {
    return reinterpret_cast<const TLD*>(
               &_TLD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TLD& a, TLD& b) {
    a.Swap(&b);
  }
  inline void Swap(TLD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TLD* New() const final {
    return CreateMaybeMessage<TLD>(nullptr);
  }

  TLD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TLD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TLD& from);
  void MergeFrom(const TLD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "verif.TLD";
  }
  protected:
  explicit TLD(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TL_2eproto);
    return ::descriptor_table_TL_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 7,
    kOpcodeFieldNumber = 1,
    kParamFieldNumber = 2,
    kSizeFieldNumber = 3,
    kSourceFieldNumber = 4,
    kSinkFieldNumber = 5,
    kDeniedFieldNumber = 6,
    kCorruptFieldNumber = 8,
  };
  // bytes data = 7;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 opcode = 1;
  void clear_opcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 opcode() const;
  void set_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_opcode() const;
  void _internal_set_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 param = 2;
  void clear_param();
  ::PROTOBUF_NAMESPACE_ID::uint32 param() const;
  void set_param(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_param() const;
  void _internal_set_param(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 source = 4;
  void clear_source();
  ::PROTOBUF_NAMESPACE_ID::uint32 source() const;
  void set_source(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_source() const;
  void _internal_set_source(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sink = 5;
  void clear_sink();
  ::PROTOBUF_NAMESPACE_ID::uint32 sink() const;
  void set_sink(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sink() const;
  void _internal_set_sink(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool denied = 6;
  void clear_denied();
  bool denied() const;
  void set_denied(bool value);
  private:
  bool _internal_denied() const;
  void _internal_set_denied(bool value);
  public:

  // bool corrupt = 8;
  void clear_corrupt();
  bool corrupt() const;
  void set_corrupt(bool value);
  private:
  bool _internal_corrupt() const;
  void _internal_set_corrupt(bool value);
  public:

  // @@protoc_insertion_point(class_scope:verif.TLD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 opcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 param_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 source_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sink_;
  bool denied_;
  bool corrupt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TL_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TLA

// uint32 opcode = 1;
inline void TLA::clear_opcode() {
  opcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TLA::_internal_opcode() const {
  return opcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TLA::opcode() const {
  // @@protoc_insertion_point(field_get:verif.TLA.opcode)
  return _internal_opcode();
}
inline void TLA::_internal_set_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  opcode_ = value;
}
inline void TLA::set_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_opcode(value);
  // @@protoc_insertion_point(field_set:verif.TLA.opcode)
}

// uint32 param = 2;
inline void TLA::clear_param() {
  param_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TLA::_internal_param() const {
  return param_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TLA::param() const {
  // @@protoc_insertion_point(field_get:verif.TLA.param)
  return _internal_param();
}
inline void TLA::_internal_set_param(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  param_ = value;
}
inline void TLA::set_param(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_param(value);
  // @@protoc_insertion_point(field_set:verif.TLA.param)
}

// uint32 size = 3;
inline void TLA::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TLA::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TLA::size() const {
  // @@protoc_insertion_point(field_get:verif.TLA.size)
  return _internal_size();
}
inline void TLA::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void TLA::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:verif.TLA.size)
}

// uint32 source = 4;
inline void TLA::clear_source() {
  source_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TLA::_internal_source() const {
  return source_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TLA::source() const {
  // @@protoc_insertion_point(field_get:verif.TLA.source)
  return _internal_source();
}
inline void TLA::_internal_set_source(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  source_ = value;
}
inline void TLA::set_source(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:verif.TLA.source)
}

// uint32 address = 5;
inline void TLA::clear_address() {
  address_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TLA::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TLA::address() const {
  // @@protoc_insertion_point(field_get:verif.TLA.address)
  return _internal_address();
}
inline void TLA::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  address_ = value;
}
inline void TLA::set_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:verif.TLA.address)
}

// uint32 mask = 6;
inline void TLA::clear_mask() {
  mask_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TLA::_internal_mask() const {
  return mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TLA::mask() const {
  // @@protoc_insertion_point(field_get:verif.TLA.mask)
  return _internal_mask();
}
inline void TLA::_internal_set_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mask_ = value;
}
inline void TLA::set_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mask(value);
  // @@protoc_insertion_point(field_set:verif.TLA.mask)
}

// bytes data = 7;
inline void TLA::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& TLA::data() const {
  // @@protoc_insertion_point(field_get:verif.TLA.data)
  return _internal_data();
}
inline void TLA::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:verif.TLA.data)
}
inline std::string* TLA::mutable_data() {
  // @@protoc_insertion_point(field_mutable:verif.TLA.data)
  return _internal_mutable_data();
}
inline const std::string& TLA::_internal_data() const {
  return data_.Get();
}
inline void TLA::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TLA::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:verif.TLA.data)
}
inline void TLA::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:verif.TLA.data)
}
inline void TLA::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:verif.TLA.data)
}
inline std::string* TLA::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TLA::release_data() {
  // @@protoc_insertion_point(field_release:verif.TLA.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TLA::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:verif.TLA.data)
}

// bool corrupt = 8;
inline void TLA::clear_corrupt() {
  corrupt_ = false;
}
inline bool TLA::_internal_corrupt() const {
  return corrupt_;
}
inline bool TLA::corrupt() const {
  // @@protoc_insertion_point(field_get:verif.TLA.corrupt)
  return _internal_corrupt();
}
inline void TLA::_internal_set_corrupt(bool value) {
  
  corrupt_ = value;
}
inline void TLA::set_corrupt(bool value) {
  _internal_set_corrupt(value);
  // @@protoc_insertion_point(field_set:verif.TLA.corrupt)
}

// -------------------------------------------------------------------

// TLD

// uint32 opcode = 1;
inline void TLD::clear_opcode() {
  opcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TLD::_internal_opcode() const {
  return opcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TLD::opcode() const {
  // @@protoc_insertion_point(field_get:verif.TLD.opcode)
  return _internal_opcode();
}
inline void TLD::_internal_set_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  opcode_ = value;
}
inline void TLD::set_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_opcode(value);
  // @@protoc_insertion_point(field_set:verif.TLD.opcode)
}

// uint32 param = 2;
inline void TLD::clear_param() {
  param_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TLD::_internal_param() const {
  return param_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TLD::param() const {
  // @@protoc_insertion_point(field_get:verif.TLD.param)
  return _internal_param();
}
inline void TLD::_internal_set_param(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  param_ = value;
}
inline void TLD::set_param(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_param(value);
  // @@protoc_insertion_point(field_set:verif.TLD.param)
}

// uint32 size = 3;
inline void TLD::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TLD::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TLD::size() const {
  // @@protoc_insertion_point(field_get:verif.TLD.size)
  return _internal_size();
}
inline void TLD::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void TLD::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:verif.TLD.size)
}

// uint32 source = 4;
inline void TLD::clear_source() {
  source_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TLD::_internal_source() const {
  return source_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TLD::source() const {
  // @@protoc_insertion_point(field_get:verif.TLD.source)
  return _internal_source();
}
inline void TLD::_internal_set_source(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  source_ = value;
}
inline void TLD::set_source(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:verif.TLD.source)
}

// uint32 sink = 5;
inline void TLD::clear_sink() {
  sink_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TLD::_internal_sink() const {
  return sink_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TLD::sink() const {
  // @@protoc_insertion_point(field_get:verif.TLD.sink)
  return _internal_sink();
}
inline void TLD::_internal_set_sink(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sink_ = value;
}
inline void TLD::set_sink(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sink(value);
  // @@protoc_insertion_point(field_set:verif.TLD.sink)
}

// bool denied = 6;
inline void TLD::clear_denied() {
  denied_ = false;
}
inline bool TLD::_internal_denied() const {
  return denied_;
}
inline bool TLD::denied() const {
  // @@protoc_insertion_point(field_get:verif.TLD.denied)
  return _internal_denied();
}
inline void TLD::_internal_set_denied(bool value) {
  
  denied_ = value;
}
inline void TLD::set_denied(bool value) {
  _internal_set_denied(value);
  // @@protoc_insertion_point(field_set:verif.TLD.denied)
}

// bytes data = 7;
inline void TLD::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& TLD::data() const {
  // @@protoc_insertion_point(field_get:verif.TLD.data)
  return _internal_data();
}
inline void TLD::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:verif.TLD.data)
}
inline std::string* TLD::mutable_data() {
  // @@protoc_insertion_point(field_mutable:verif.TLD.data)
  return _internal_mutable_data();
}
inline const std::string& TLD::_internal_data() const {
  return data_.Get();
}
inline void TLD::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TLD::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:verif.TLD.data)
}
inline void TLD::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:verif.TLD.data)
}
inline void TLD::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:verif.TLD.data)
}
inline std::string* TLD::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TLD::release_data() {
  // @@protoc_insertion_point(field_release:verif.TLD.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TLD::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:verif.TLD.data)
}

// bool corrupt = 8;
inline void TLD::clear_corrupt() {
  corrupt_ = false;
}
inline bool TLD::_internal_corrupt() const {
  return corrupt_;
}
inline bool TLD::corrupt() const {
  // @@protoc_insertion_point(field_get:verif.TLD.corrupt)
  return _internal_corrupt();
}
inline void TLD::_internal_set_corrupt(bool value) {
  
  corrupt_ = value;
}
inline void TLD::set_corrupt(bool value) {
  _internal_set_corrupt(value);
  // @@protoc_insertion_point(field_set:verif.TLD.corrupt)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace verif

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TL_2eproto
